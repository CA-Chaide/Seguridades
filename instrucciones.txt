Instrucciones para reutilizar el componente de menú lateral (Sidebar)
============================================================

Este instructivo te permitirá replicar el menú lateral colapsable (Sidebar) de este proyecto en otra aplicación React/Next.js usando TailwindCSS y Lucide React.

PASO 1: Copia de archivos necesarios
-----------------------------------
1. Copia el archivo `src/components/ui/sidebar-new.tsx` a la carpeta correspondiente de tu nuevo proyecto (por ejemplo, `src/components/ui/`).
2. Copia el archivo `src/components/ui/button.tsx` si tu proyecto no tiene un botón reutilizable compatible.
3. Asegúrate de tener la función `cn` (utility para clases condicionales). Si no la tienes, copia `src/lib/utils.ts` o implementa una función similar:

```ts
export function cn(...classes: (string | undefined | null | false)[]) {
  return classes.filter(Boolean).join(' ');
}
```

PASO 2: Instala dependencias necesarias
--------------------------------------
- Instala `lucide-react` para los íconos:

```
npm install lucide-react
```

- Asegúrate de tener TailwindCSS configurado en tu proyecto.

PASO 3: Uso del Sidebar en tu aplicación
----------------------------------------

PASO 3: Recupera y construye el menú dinámicamente
--------------------------------------------------
1. Crea un servicio para obtener el menú desde el backend. Ejemplo:
```ts
// src/services/menu.service.ts
import axios from 'axios';

export async function getMenuPorAplicacion(codigoAplicacion: number) {
  const response = await axios.get(`/api/menu?codigoAplicacion=${codigoAplicacion}`);
  return response.data; // Ajusta según la estructura de tu backend
}
```

2. Usa el menú recuperado para construir el sidebar:
```tsx
import React, { useEffect, useState } from 'react';
import { Sidebar, SidebarHeader, SidebarContent, SidebarMenu, SidebarMenuItem, SidebarMenuButton } from '@/components/ui/sidebar-new';
import * as LucideIcons from 'lucide-react';
import { getMenuPorAplicacion } from '@/services/menu.service';

export default function LayoutSidebar({ codigoAplicacion }) {
  const [menu, setMenu] = useState([]);

  useEffect(() => {
    getMenuPorAplicacion(codigoAplicacion).then(setMenu);
  }, [codigoAplicacion]);

  // Helper para renderizar el árbol de menú
  const renderMenuTree = (nodes) => (
    <>
      {nodes.map((item) => (
        <SidebarMenuItem key={item.codigo_menu}>
          <SidebarMenuButton href={item.ruta || '#'}>
            {item.icono && LucideIcons[item.icono] ? React.createElement(LucideIcons[item.icono], { className: 'w-4 h-4' }) : null}
            {item.nombre}
          </SidebarMenuButton>
          {item.children && item.children.length > 0 && (
            <SidebarMenu>{renderMenuTree(item.children)}</SidebarMenu>
          )}
        </SidebarMenuItem>
      ))}
    </>
  );

  return (
    <Sidebar>
      <SidebarHeader>Mi Aplicación</SidebarHeader>
      <SidebarContent>
        <SidebarMenu>
          {renderMenuTree(menu)}
        </SidebarMenu>
      </SidebarContent>
    </Sidebar>
  );
}
```

- Asegúrate de que el backend entregue el menú en formato de árbol (cada item puede tener `children`). Si no, deberás transformarlo antes de renderizar.

PASO 4: Personalización
----------------------
- Puedes agregar más íconos de `lucide-react` o los que prefieras.
- El sidebar soporta colapso automático con el botón incluido.
- Usa la prop `active` en `SidebarMenuButton` para resaltar la opción activa.

PASO 5: Consideraciones
-----------------------
- Si tu proyecto usa rutas diferentes, ajusta los `href` de los botones.
- Si usas Next.js, puedes reemplazar `<a>` por `<Link>` de `next/link` si lo deseas, adaptando el componente.
- Puedes anidar más componentes o agregar lógica según tus necesidades.

¡Listo! Así puedes reutilizar el menú lateral en cualquier aplicación compatible.
